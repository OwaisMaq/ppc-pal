AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Marketing Stream SQS Pipeline Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  SupabaseIngestUrl:
    Type: String
    Description: 'Supabase function URL for AMS ingest (e.g., https://[project-id].supabase.co/functions/v1/ams-ingest)'
  
  SupabaseIngestSecret:
    Type: String
    NoEcho: true
    Description: 'HMAC secret for signing requests to Supabase'

Resources:
  AmsEventsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'ams-events-dlq-${Environment}'
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: AMS

  AmsEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'ams-events-queue-${Environment}'
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 360
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AmsEventsDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: AMS

  AmsEventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AmsEventsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAmazonMarketingStreamEU
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt AmsEventsQueue.Arn
            Condition:
              StringEquals:
                aws:SourceAccount: "119690846692"
              ArnLike:
                aws:SourceArn: "arn:aws:sns:eu-west-1:119690846692:*"
          - Sid: AllowAmazonMarketingStreamNA
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt AmsEventsQueue.Arn
            Condition:
              StringEquals:
                aws:SourceAccount: "668473351658"
              ArnLike:
                aws:SourceArn: "arn:aws:sns:us-east-1:668473351658:*"
          - Sid: AllowAmazonMarketingStreamFE
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt AmsEventsQueue.Arn
            Condition:
              StringEquals:
                aws:SourceAccount: "320228592410"
              ArnLike:
                aws:SourceArn: "arn:aws:sns:us-west-2:320228592410:*"

  AmsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ams-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt AmsEventsQueue.Arn

  AmsIngestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ams-ingest-lambda-${Environment}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt AmsLambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          SUPABASE_INGEST_URL: !Ref SupabaseIngestUrl
          SUPABASE_INGEST_SECRET: !Ref SupabaseIngestSecret
          NODE_ENV: production
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('AMS Lambda triggered with event:', JSON.stringify(event, null, 2));
            return { statusCode: 200, body: 'OK' };
          };
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: AMS

  AmsLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt AmsEventsQueue.Arn
      FunctionName: !Ref AmsIngestLambda
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      Enabled: true

  AmsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/ams-ingest-lambda-${Environment}'
      RetentionInDays: 14

  QueueBacklogAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'AMS-Queue-Backlog-${Environment}'
      AlarmDescription: 'AMS queue has old messages indicating processing backlog'
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 300
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AmsEventsQueue.QueueName
      TreatMissingData: notBreaching

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'AMS-Lambda-Errors-${Environment}'
      AlarmDescription: 'AMS Lambda function has errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AmsIngestLambda
      TreatMissingData: notBreaching

  DLQMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'AMS-DLQ-Messages-${Environment}'
      AlarmDescription: 'Messages in AMS dead letter queue'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AmsEventsDLQ.QueueName
      TreatMissingData: notBreaching

Outputs:
  QueueArn:
    Description: 'AMS Events Queue ARN'
    Value: !GetAtt AmsEventsQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-QueueArn'
  
  QueueUrl:
    Description: 'AMS Events Queue URL'
    Value: !Ref AmsEventsQueue
    Export:
      Name: !Sub '${AWS::StackName}-QueueUrl'
  
  LambdaFunctionName:
    Description: 'AMS Lambda Function Name'
    Value: !Ref AmsIngestLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'
  
  DLQArn:
    Description: 'Dead Letter Queue ARN'
    Value: !GetAtt AmsEventsDLQ.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DLQArn'
